═══════════════════════════════════════════════════════════════
  DEBUG COMMANDS - Copy & Paste Reference
═══════════════════════════════════════════════════════════════

Use these commands in the browser console to debug session issues.


█████████ BASIC DIAGNOSTICS █████████

# Print full session tracking report
printSessionReport()

# Check if session is ready
window.sessionTracker.isReady()

# Verify session status
await window.sessionTracker.verifySession()


█████████ SESSION INSPECTION █████████

# View current Supabase session
console.log(window.__SUPABASE_SESSION__)

# View JWT claims (app_metadata)
console.log(window.__JWT_CLAIMS__)

# View all tracking checkpoints
console.log(window.__SESSION_TRACKER__)

# Get all checkpoints as array
window.sessionTracker.getCheckpoints()


█████████ DETAILED ANALYSIS █████████

# Check specific claim values
console.log(window.__JWT_CLAIMS__?.role)
console.log(window.__JWT_CLAIMS__?.telegram_id)
console.log(window.__JWT_CLAIMS__?.workspace_id)
console.log(window.__JWT_CLAIMS__?.user_id)

# Check session expiration
const session = window.__SUPABASE_SESSION__
if (session) {
  const expiresAt = session.expires_at
  const now = Math.floor(Date.now() / 1000)
  const expiresIn = expiresAt - now
  console.log(`Session expires in ${Math.floor(expiresIn / 60)} minutes`)
}

# Check session user info
console.log(window.__SUPABASE_SESSION__?.user?.id)
console.log(window.__SUPABASE_SESSION__?.user?.email)
console.log(window.__SUPABASE_SESSION__?.user?.app_metadata)


█████████ CHECKPOINT FILTERING █████████

# Find specific checkpoint
window.sessionTracker.getCheckpoints().find(cp =>
  cp.checkpoint === 'AUTH_COMPLETE'
)

# Find all errors
window.sessionTracker.getCheckpoints().filter(cp =>
  cp.status === 'error'
)

# Find all warnings
window.sessionTracker.getCheckpoints().filter(cp =>
  cp.status === 'warning'
)

# Get last checkpoint
const checkpoints = window.sessionTracker.getCheckpoints()
console.log(checkpoints[checkpoints.length - 1])


█████████ TIMING ANALYSIS █████████

# Calculate time from auth start to complete
const checkpoints = window.sessionTracker.getCheckpoints()
const authStart = checkpoints.find(cp => cp.checkpoint === 'AUTH_SET_SESSION')
const authComplete = checkpoints.find(cp => cp.checkpoint === 'AUTH_COMPLETE')
if (authStart && authComplete) {
  const duration = authComplete.timestamp - authStart.timestamp
  console.log(`Auth took ${duration}ms`)
}

# Calculate time to session ready
const waitStart = checkpoints.find(cp => cp.checkpoint === 'WAIT_START')
const waitSuccess = checkpoints.find(cp => cp.checkpoint === 'WAIT_SUCCESS')
if (waitStart && waitSuccess) {
  const duration = waitSuccess.timestamp - waitStart.timestamp
  console.log(`Session ready after ${duration}ms`)
}


█████████ LIVE MONITORING █████████

# Watch for new checkpoints (run this once)
const originalLog = window.sessionTracker.log
window.sessionTracker.log = function(...args) {
  originalLog.apply(this, args)
  console.log('NEW CHECKPOINT:', args)
}

# Monitor session changes
setInterval(async () => {
  const result = await window.sessionTracker.verifySession()
  console.log('Session health:', result.valid ? '✅ OK' : '❌ INVALID')
}, 5000)


█████████ EXPORT DIAGNOSTICS █████████

# Export full report as text
console.log(window.sessionTracker.getReport())

# Export checkpoints as JSON
console.log(JSON.stringify(window.sessionTracker.getCheckpoints(), null, 2))

# Copy session to clipboard (if supported)
navigator.clipboard?.writeText(JSON.stringify(window.__SUPABASE_SESSION__, null, 2))


█████████ TROUBLESHOOTING SCENARIOS █████████

## Scenario 1: "חסרים claims: Session" Error

# Check if session exists
!!window.__SUPABASE_SESSION__
// If false → No session at all, auth didn't work

# Check if claims exist
!!window.__JWT_CLAIMS__
// If false → Session exists but no claims

# Check which claims are missing
const claims = window.__JWT_CLAIMS__ || {}
const required = ['role', 'telegram_id', 'user_id', 'workspace_id']
const missing = required.filter(k => !claims[k])
console.log('Missing claims:', missing)
// Shows exactly which claims are missing


## Scenario 2: "שגיאה בשינוי התפקיד" Error

# Check if session is still valid
await window.sessionTracker.verifySession()
// Look at result.valid and result.errors

# Check last role update attempt
const roleUpdates = window.sessionTracker.getCheckpoints().filter(cp =>
  cp.checkpoint.startsWith('ROLE_UPDATE')
)
console.log(roleUpdates)
// See where it failed


## Scenario 3: Slow Loading

# Check wait times
const checkpoints = window.sessionTracker.getCheckpoints()
checkpoints.forEach(cp => {
  console.log(`${cp.checkpoint}: ${cp.message}`)
})
// Look for WAIT_SUCCESS to see how long it took


## Scenario 4: Intermittent Issues

# Clear tracker and retry
window.sessionTracker.clear()
// Then reload page and watch new checkpoints


█████████ SHARING DEBUG INFO █████████

# Collect all info for bug report
const debugInfo = {
  report: window.sessionTracker.getReport(),
  checkpoints: window.sessionTracker.getCheckpoints(),
  session: window.__SUPABASE_SESSION__,
  claims: window.__JWT_CLAIMS__,
  ready: window.sessionTracker.isReady(),
  timestamp: new Date().toISOString()
}
console.log(JSON.stringify(debugInfo, null, 2))
// Copy this output when reporting issues


█████████ PERFORMANCE TESTING █████████

# Test session verification speed
console.time('verify')
await window.sessionTracker.verifySession()
console.timeEnd('verify')
// Should be < 50ms

# Test wait for session (when already ready)
console.time('wait')
await window.sessionTracker.waitForSession(1000)
console.timeEnd('wait')
// Should be immediate if already ready


█████████ AUTOMATED CHECKS █████████

# Quick health check (run this to verify everything)
async function healthCheck() {
  console.log('=== SESSION HEALTH CHECK ===')

  const ready = window.sessionTracker.isReady()
  console.log('Ready:', ready ? '✅' : '❌')

  const session = window.__SUPABASE_SESSION__
  console.log('Session exists:', !!session ? '✅' : '❌')

  const claims = window.__JWT_CLAIMS__
  console.log('Claims exist:', !!claims ? '✅' : '❌')

  if (claims) {
    console.log('role:', claims.role || '❌ MISSING')
    console.log('telegram_id:', claims.telegram_id || '❌ MISSING')
    console.log('user_id:', claims.user_id || '❌ MISSING')
    console.log('workspace_id:', claims.workspace_id || '❌ MISSING')
  }

  const verification = await window.sessionTracker.verifySession()
  console.log('Valid:', verification.valid ? '✅' : '❌')

  if (verification.errors.length > 0) {
    console.log('Errors:', verification.errors)
  }

  console.log('========================')
}

// Run it
await healthCheck()


█████████ EXPECTED OUTPUT (SUCCESS) █████████

printSessionReport()

=== SESSION TRACKER REPORT ===
12:34:56.123 ✅ [AUTH_SET_SESSION] Setting Supabase session
12:34:56.234 ✅ [AUTH_SESSION_SET] Session set, waiting for propagation
12:34:56.245 ✅ [WAIT_START] Waiting for session (max 5000ms)
12:34:56.256 ✅ [VERIFY_START] Starting session verification
12:34:56.267 ✅ [VERIFY_SESSION] Session exists
12:34:56.278 ✅ [VERIFY_CLAIMS] All required claims present
12:34:56.512 ✅ [WAIT_SUCCESS] Session ready after 287ms
12:34:56.523 ✅ [AUTH_COMPLETE] Authentication complete with verified claims
12:35:01.123 ✅ [USER_MGMT_LOAD_START] Starting user load
12:35:01.134 ✅ [USER_MGMT_WAIT_SESSION] Waiting for session readiness
12:35:01.145 ✅ [USER_MGMT_SESSION_READY] Session verified and ready
12:35:01.678 ✅ [USER_MGMT_ACCESS_CHECK] Access validation

Session Established: ✅
Claims Verified: ✅
Total Checkpoints: 12
============================


█████████ EXPECTED OUTPUT (ERROR) █████████

printSessionReport()

=== SESSION TRACKER REPORT ===
12:34:56.123 ✅ [AUTH_SET_SESSION] Setting Supabase session
12:34:56.234 ✅ [AUTH_SESSION_SET] Session set, waiting for propagation
12:34:56.245 ✅ [WAIT_START] Waiting for session (max 5000ms)
12:34:56.256 ✅ [VERIFY_START] Starting session verification
12:34:56.267 ✅ [VERIFY_SESSION] Session exists
12:34:56.278 ❌ [VERIFY_CLAIMS] Missing claims: role, workspace_id
12:34:56.400 ⏳ [VERIFY_START] Starting session verification
12:34:56.411 ❌ [VERIFY_CLAIMS] Missing claims: role, workspace_id
... (repeats until timeout)
12:35:01.300 ❌ [WAIT_TIMEOUT] Session not ready after 5000ms

Session Established: ❌
Claims Verified: ❌
Total Checkpoints: 45
============================

→ This means telegram-verify is not adding claims to JWT


═══════════════════════════════════════════════════════════════
  QUICK REFERENCE
═══════════════════════════════════════════════════════════════

Most useful commands:
  1. printSessionReport()                  → See everything
  2. window.sessionTracker.isReady()       → Check if ready
  3. console.log(window.__JWT_CLAIMS__)    → See claims
  4. await healthCheck()                   → Run full check

When to use:
  • Page loads with error → printSessionReport()
  • Role update fails → Check ROLE_UPDATE checkpoints
  • Slow performance → Check WAIT_SUCCESS timing
  • Reporting bug → Copy full report output

═══════════════════════════════════════════════════════════════
